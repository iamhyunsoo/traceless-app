@page "/chat"
@using DataAccess
@using DataAccess.Repository
@using Microsoft.AspNetCore.SignalR.Client
@using Server.Services
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IChatRepo ChatRepo
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="row chat">
    <div class="col-lg-4 col-12 chat-list">
        <h2>Chats</h2>
        <hr />
        <h4>Start a chat</h4>
        <div class="form-group">
            <label>
                User email(Separate with comma for multiple users): <input class="w-100" @bind="userInput" />
            </label>
        </div>
        <button class="mt-1 text-center btn btn-info w-100" @onclick="CreateChatRoom">Chat</button>
        <hr />

        @foreach (var room in messages)
        {
            <div @onclick="@(()=>SetMessages(@room.Key, @room.Value.First))" class="@ChatCSS[@room.Key]">
                <div class="avatar">
                    <img src="https://cdn.vectorstock.com/i/1000x1000/97/66/human-face-with-question-mark-vector-20379766.webp" alt="Avatar">
                    <span class="unread">?</span>
                </div>
                <div class="chat-info">
                    <div style="display:flex; justify-content: space-between;" >
                        <h3>[@room.Value.First]</h3>
                        <h3 @onclick="(() => DeleteChatRoom(room.Key))">🗑️</h3>
                    </div>
                    
                    <p class="last-message">
                        @if (@room.Value.Second.LastOrDefault() != null)
                        {
                            @room.Value.Second.LastOrDefault()!.Message
                        }
                    </p>
                    <p class="time">
                        @if (@room.Value.Second.LastOrDefault() != null)
                        {
                            @ConvertTimeStampToDateTime(@room.Value.Second.LastOrDefault()!.CreatedAt, -4)
                        }
                    </p>
                </div>
            </div>
        }
        @if (!messages.Any())
        {
            <p>There is no chat room.</p>
        }
    </div>

    <div class="border border-primary col-lg-8 col-12">
        
        @if (CurrentChatId is not null && messages.ContainsKey(CurrentChatId)) 
        {
            <div class="chat-header">
                <div class="avatar">
                    <img src="https://cdn.vectorstock.com/i/1000x1000/97/66/human-face-with-question-mark-vector-20379766.webp" alt="Avatar">
                </div>
                <div class="chat-info">
                    <h2>@CurrentChatName</h2>
                    <p class="status">Either online or offline</p>
                </div>
            </div>

            <div class="chat-body">
                @if (!string.IsNullOrWhiteSpace(CurrentChatId))
                {
                    <button @onclick="(()=>GetPastChatMessages(CurrentChatId))">Load more</button>
                }

                @foreach (var msg in messages[CurrentChatId].Second)
                {
                    var isMedia = false;
                    bool isImage = false;
                    string preSignedUrl = "";
                    string fileName = "";
                    if (msg?.Message != null && msg.Message.StartsWith(Helpers.S3_MEDIA_FILE_PREFIX))
                    {
                        isMedia = true;
                        fileName = msg.Message.Substring(8);
                        if (S3PresignedUrlCache.ContainsKey(fileName))
                        {
                            var generatedAt = S3PresignedUrlCache[fileName].Item2;
                            if (generatedAt.AddMinutes(10) < DateTime.UtcNow)
                            {
                                preSignedUrl = ChatRepo.GeneratePreSignedUrl(fileName);
                                S3PresignedUrlCache[fileName] = new Tuple<string, DateTime>( preSignedUrl, DateTime.UtcNow );
                            }
                            else
                            {
                                preSignedUrl = S3PresignedUrlCache[fileName].Item1;
                            }
                        }
                        else
                        {
                            preSignedUrl = ChatRepo.GeneratePreSignedUrl(fileName);
                            S3PresignedUrlCache[fileName] = new Tuple<string, DateTime>( preSignedUrl, DateTime.UtcNow );
                        }
                        isImage = IsImageUrl(preSignedUrl);
                    }

                    if (isMedia)
                    {
                        <div class="message-wrapper">
                            <p><small>@msg!.Sender</small></p>
                            @if (isImage)
                            {
                                <img src="@preSignedUrl" alt="@fileName" class="img-fluid media-content" @onclick='(() => ShowModal(preSignedUrl, "image"))' />
                            }
                            else
                            {
                                <video controls class="w-100 media-content">
                                    <source src="@preSignedUrl" type="video/mp4" @onclick='(() => ShowModal(preSignedUrl, "video"))' />
                                    Your browser does not support the video tag.
                                </video>
                            }
                            <p><span class="time">@ConvertTimeStampToDateTime(@msg.CreatedAt, -4)</span></p>
                        </div>
                    }
                    else
                    {
                        if (@msg!.Sender!.Equals(User?.Email))
                        {
                            <div class="chat-bubble outgoing">
                                <p>@msg!.Sender : @msg.Message</p>
                                <span class="time">@ConvertTimeStampToDateTime(@msg.CreatedAt, -4)</span>
                            </div>
                        }
                        else
                        {
                            <div class="chat-bubble incoming">
                                <p>@msg!.Sender : @msg.Message</p>
                                <span class="time">@ConvertTimeStampToDateTime(@msg.CreatedAt, -4)</span>
                            </div>                
                        }
                  
                    }
                }
            </div>

            <div class="chat-input">
                <input @bind="messageInput" type="text" placeholder="Type a message..."  @onkeydown="@Enter" >
                <div class="attachment-wrapper">
                    <InputFile OnChange="HandleFileSelected" multiple accept="image/*,video/*" class="input-file"></InputFile>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-paperclip" viewBox="0 0 16 16">
                        <path d="M4.5 3a2.5 2.5 0 0 1 5 0v9a1.5 1.5 0 0 1-3 0V5a.5.5 0 0 1 1 0v7a.5.5 0 0 0 1 0V3a1.5 1.5 0 1 0-3 0v9a2.5 2.5 0 0 0 5 0V5a.5.5 0 0 1 1 0v7a3.5 3.5 0 1 1-7 0V3z"></path>
                    </svg>
                </div>
                <button @onclick="(() => SendChatMessageToGroupMembers(CurrentChatId))" disabled="@(CurrentChatId is null)">Send</button>
            </div>
        }
        else
        {
            <div class="chat-body">
                <h3>Select a chat room or start a new chat!</h3>
            </div>
        }
    </div>
</div>

@if (filesToUpload != null && filesToUpload.Count > 0)
{
    <div class="mt-2">
        <strong>Selected files (Only less than 10 MB):</strong>
        <ul>
            @foreach (var file in filesToUpload)
            {
                <li>
                    File name: @file.Name <br />
                    File size: @((file.Size / 1024).ToString("N0")) KB <br />
                    File type: @file.ContentType
                </li>
            }
        </ul>
    </div>
}

@if (showModal)
{
    <div class="modal" @onclick="(() => CloseModal())" >
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-close" @onclick="(() => CloseModal())">&times;</div>
            @if (selectedMediaType == "image")
            {
                <img src="@selectedMediaUrl" alt="Selected image" class="img-fluid" />
            }
            else if (selectedMediaType == "video")
            {
                <video controls class="w-100">
                    <source src="@selectedMediaUrl" type="video/mp4" />
                    Your browser does not support the video tag.
                </video>
            }
        </div>
    </div>
}

<style>
* {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
}

.attachment-wrapper {
  position: relative;
}

.input-file {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
}

.media-content {
  max-width: 100%;
  max-height: 100px;
}

.chat {
  height: 60vh;
}

.chat-list {
  background-color: #f8f8f8;
  padding: 20px;
  overflow-y: scroll;
  max-height: 620px;
}

.chat-item {
  display: flex;
  align-items: center;
  padding: 10px;
  transition: transform 0.3s ease;
  cursor: pointer;
}

.chat-item:hover {
	outline: none;
	background-color: #CCFFFF;
}
.chat-item.active {
  background-color: #CCFFFF;
  font-weight: bold;
}

.avatar {
  position: relative;
  margin-right: 10px;
}

.avatar img {
  width: 50px;
  height: 50px;
}
.unread {
  position: absolute;
  top: 0;
  right: 0;
  width: 20px;
  height: 20px;
  background-color: green;
  color: #fff;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 14px;
  font-weight: bold;
}

.chat-info {
  flex: 1;
}

.chat-info h3 {
  margin: 0;
  font-size: 16px;
}

.chat-info .last-message {
  margin: 0;
  font-size: 14px;
  color: #555;
}

.chat-info .time {
  margin: 0;
  font-size: 12px;
  color: #999;
}

/*.chat-window {
  flex: 3;
  display: flex;
  flex-direction: column;
}*/

.chat-header {
  display: flex;
  align-items: center;
  background-color: #f8f8f8;
  padding: 10px;
}

.chat-header .avatar {
  margin-right: 10px;
}

.chat-header h2 {
  margin: 0;
  font-size: 16px;
}

.chat-header .status {
  margin: 0;
  font-size: 12px;
  color: green;
}

.chat-body {
  flex: 1;
  background-color: #fff;
  padding: 20px;
  overflow-y: scroll;
  max-height: 500px;
}

.chat-bubble {
  margin-bottom: 10px;
}

.incoming {
  display: flex;
  align-items: center;
}

.incoming p {
  background-color: #f8f8f8;
  padding: 10px;
  border-radius: 20px;
  margin: 0;
  font-size: 14px;
  max-width: 80%;
}

.outgoing {
  display: flex;
  flex-direction: row-reverse;
  align-items: center;
}

.outgoing p {
  background-color: green;
  color: #fff;
  padding: 10px;
  border-radius: 20px;
  margin: 0;
  font-size: 14px;
  max-width: 80%;
}

.time {
  margin-left: 10px;
  margin-right: 10px;
  font-size: 12px;
  color: #999;
}

.chat-input {
  display: flex;
  align-items: center;
  background-color: #f8f8f8;
  padding: 10px;
}

.chat-input input {
  flex: 1;
  padding: 10px;
  border: none;
  border-radius: 20px;
  font-size: 14px;
}

.chat-input button {
  margin-left: 10px;
  padding: 10px 20px;
  border: none;
  border-radius: 20px;
  background-color: green;
  color: #fff;
  font-size: 14px;
  cursor: pointer;
}

.chat-input button:hover {
  background-color: #4CAF50;
}

.message-wrapper {
    background-color: #f8f8f8;
    padding: 10px;
    border-radius: 20px;
    margin: 0;
    font-size: 14px;
    margin-bottom: 10px;
    max-width: 60%;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
}

.modal-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 4px;
  max-width: 80%;
  max-height: 80%;
  overflow: auto;
}

.modal-close {
  position: absolute;
  top: 10px;
  right: 10px;
  cursor: pointer;
}

</style>

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = default!;
    private string? userInput, messageInput, UserId;
    private ApplicationUser? User;
    // <ChatRoomKey, <ChatRoomName, [ChatRoomMessages]>>
    private Dictionary<string, Pair<string, List<ChatMessage>>> messages = new Dictionary<string, Pair<string, List<ChatMessage>>>();
    private bool IsAuthenticated { get; set; } = false;
    private string? CurrentChatId { get; set; }
    private string? CurrentChatName { get; set; } = "[Chat room not selected]";
    private List<ChatMessage> messagesDisplayed = new List<ChatMessage>();
    private Dictionary<string, string> ChatCSS = new Dictionary<string, string>();
    private RedisPubSub _pubSub = default!;
    private List<string>? attachedFileNames;
    private IReadOnlyList<IBrowserFile>? filesToUpload;
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    private const long MaxFileSize = 10 * 1024 * 1024; // 10 MB in bytes

    // Key: fileName, Value: { Item1: S3 image pre signed Url, Item2: generated at }
    private Dictionary<string, Tuple<string, DateTime>> S3PresignedUrlCache = new(); 
    private bool showModal = false;
    private string selectedMediaUrl = "";
    private string selectedMediaType = "";

    protected override async Task OnInitializedAsync()
    {
        await SetUserId();
        if (!IsAuthenticated)
            return;
        else
        {
            var redisEndpoint = Configuration.GetConnectionString("MyRedisConStr");
            _pubSub = new RedisPubSub(redisEndpoint!, UserId!);
            _pubSub.Subscribe(HandleMessage);
        }

        await SetUser();

        //Add User to and start listening to every chat room User is in
        await SetChatRooms();

        // set the current user info in redis cache
        var res = await ChatRepo.SetUserInfoInRedis(UserId, ServerInfo.Id);
    }

    private async void HandleMessage(string message) // message must be ChatRoomId
    {
        await InvokeAsync(async () =>
        {
        // parts[0] must be PUB_SUB_TYPE
        // parts[1] must be a chat room id
            string[] parts = message.Split("::", StringSplitOptions.RemoveEmptyEntries);
            string chatType = parts[0];
            string chatId = parts[1];
            PUB_SUB_TYPE type;
            if (Enum.TryParse(chatType, out type))
            {
                if (type == PUB_SUB_TYPE.NEW_CHAT)
                {
                    if (messages.ContainsKey(chatId))
                    {
                        var lastMsg = messages[chatId].Second.LastOrDefault();
                        long lastAt = 0;
                        if (lastMsg is not null)
                            lastAt = lastMsg.CreatedAt;

                        var msgs = await ChatRepo.GetItemsAsync(chatId, lastAt);
                        msgs.ToList().ForEach(x => Console.WriteLine($"{x.Sender}: {x.Message}"));
                        messages[chatId].Second.AddRange(msgs.ToList());
                    }
                }
                else if (type == PUB_SUB_TYPE.NEW_ROOM)
                {
                    SetChatRoom(chatId);
                }
                else if (type == PUB_SUB_TYPE.DELETE_CHAT)
                {
                    if (messages.ContainsKey(chatId))
                    {
                        var dc = new ChatMessage
                        {
                            Id = "", CreatedAt = (int)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds,
                            Sender = "Anonymous", Message = "This chat room has been destroyed. You won't see chats in this room once you refresh."
                        };
                        messages[chatId].Second.Add(dc);
                    }
                }
            }
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task CreateChatRoom()
    {
        if (userInput is null)
            return;

        var members = userInput.Split(",").ToList();
        if (members is null || (members is not null && !members.Any()))
            return;

        members!.Add(User!.Email);
        var uuid = Guid.NewGuid().ToString();
        var chat = await ChatRepo.CreateChatRoom(uuid, Helpers.CHAT_PREFIX_DB + uuid, members!);
        if (chat is not null)
        {
            await SetUser();
            SetChatRoom(chat.Id, string.Join(", ", members));
            members.RemoveAll(x => x == User!.Email); // alreaady registered in above function, SetChatRoom(chat.Id).
            await NotifyNewChatroom(chat.Id, members!);
        }
        else
            Console.WriteLine("FAIL TO CREATE CHATROOM\n");
    }

    private async Task DeleteChatRoom(string id)
    {
        await ChatService.SendChatMessageToGroupMembers(id, User!.Email, "", true);
        var res = await ChatRepo.DeleteChatRoom(id);
        if (res)
        {
            await SetUser();
            SetChatRoom(id, null, true);
            messages.Remove(id);
        }
        else
            Console.WriteLine("FAIL TO DELETE CHATROOM\n");
    }

    private async Task SendChatMessageToGroupMembers(string? gid)
    {
        if (gid is not null)
        {
            if (filesToUpload is not null)
            {
                await UploadFilesToS3();
            }
            if (attachedFileNames is not null)
            {
                foreach (var fname in attachedFileNames)
                {
                    await ChatService.SendChatMessageToGroupMembers(gid, User!.Email, $"{Helpers.S3_MEDIA_FILE_PREFIX}{fname}", false);
                }
                attachedFileNames = null;
            }

            if (!string.IsNullOrWhiteSpace(messageInput))
                await ChatService.SendChatMessageToGroupMembers(gid, User!.Email, messageInput, false);

            messageInput = "";
        }
    }

    private async Task NotifyNewChatroom(string groupId, List<string> receivers)
    {

        for (int i = 0; i < receivers.Count; ++i)
        {
            await ChatService.NotifyNewChatroom(groupId, receivers[i]);
            messageInput = "";
        }
    }

    public void Dispose()
    {
        _pubSub.Unsubscribe(HandleMessage);
    }

    private async Task SetUserId()
    {
        // Set the ID of the current logged in user
        var authState = await AuthenticationState;
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            IsAuthenticated = true;
        }
        else
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/Identity/Account/Login?returnUrl={uri.LocalPath}", true);
        }
    }

    private async Task SetUser()
    {
        User = await ChatRepo.GetUser(UserId);
    }

    private async Task SetChatRooms()
    {
        messages.Clear();

        // Add User to and start listening to every chat room User is in
        var chatRoom = User?.ChatRooms.ToList();
        for(var i = 0; i < chatRoom!.Count; ++i)
        {
            messages[chatRoom[i].Id] = new Pair<string, List<ChatMessage>>(chatRoom[i].Name, new List<ChatMessage>()); // Load previous messages later
            var msgs = await ChatRepo.GetLastItemsAsync(chatRoom[i].Id);
            if (msgs != null)
                messages[chatRoom[i].Id].Second = msgs.ToList();
            ChatCSS[chatRoom[i].Id] = "chat-item";
        }
    }

    private void SetChatRoom(string roomId, string? userEmails = null, bool remove = false)
    {
        if (remove)
        {

        }
        else // Add
        {
            messages.Add(roomId, new Pair<string, List<ChatMessage>>(userEmails ?? "unknown", new List<ChatMessage>()));
            ChatCSS[roomId] = "chat-item";                   
        }
    }

    public void SetMessages(string chatId, string chatname)
    {
        if (CurrentChatId != null)
            ChatCSS[CurrentChatId] = "chat-item";
        ChatCSS[chatId] = "chat-item active";
        CurrentChatId = chatId;
        CurrentChatName = chatname;
        messagesDisplayed = messages[chatId].Second;
    }

    private async Task GetPastChatMessages(string id) // char room id
    {
        var fMsg = messages[id].Second.FirstOrDefault();
        long fAt = 0;
        if (fMsg is not null)
            fAt = fMsg.CreatedAt;

        var msgs = await ChatRepo.GetPastItemsAsync(id, fAt,5);
        var listMsgs = msgs.ToList();
        listMsgs.AddRange(messages[id].Second);
        messages[id].Second = listMsgs;
        await InvokeAsync(StateHasChanged);
    }

    public DateTime ConvertTimeStampToDateTime(long timestamp, int diff)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(timestamp);
        return dateTimeOffset.UtcDateTime.AddHours(diff);
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(messageInput))
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                await SendChatMessageToGroupMembers(CurrentChatId);
            }
        }
    }

    private async Task ShowFilePicker()
    {
        await JSRuntime.InvokeVoidAsync("showFilePicker", "filePicker");
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Limit the file size, 10 mb
        filesToUpload = e.GetMultipleFiles()
            .Where(file => file.Size <= MaxFileSize)
            .ToList();
    }

    private async Task UploadFilesToS3()
    {
        if (filesToUpload != null && filesToUpload.Count > 0)
        {
            var uniqueFileNames = new List<string>();

            foreach (var file in filesToUpload)
            {
                var uniqueFileName = await ChatRepo.UploadToS3(file);
                uniqueFileNames.Add(uniqueFileName);
            }

            attachedFileNames = uniqueFileNames;
            StateHasChanged();
        }
        filesToUpload = null;
    }

    private bool IsImageUrl(string preSignedUrl)
    {
        preSignedUrl = preSignedUrl.ToLower();
        if (preSignedUrl.Contains(".png") 
        || preSignedUrl.Contains(".jpg") 
        || preSignedUrl.Contains(".jpeg") 
        || preSignedUrl.Contains(".gif") 
        || preSignedUrl.Contains(".bmp") 
        || preSignedUrl.Contains(".tiff") 
        || preSignedUrl.Contains(".ico") 
        || preSignedUrl.Contains(".webp") 
        || preSignedUrl.Contains(".svg"))
            return true;
        return false;
    }

    private void ShowModal(string mediaUrl, string mediaType)
    {
        showModal = true;
        selectedMediaUrl = mediaUrl;
        selectedMediaType = mediaType;
    }

    private void CloseModal()
    {
        showModal = false;
        selectedMediaUrl = "";
        selectedMediaType = "";
    }
}